
%div#new-comment
  %h3 #{ mode } comment

  -# TODO: form_for can take a nested object to get remaining fields
  =# e.g., form_for @comment.task do |t|...to get t.status, t.assignee, &c.
  = form_for @comment do |f|
    - if @comment.errors.any?
      #error_explanation
        %h3= "#{ pluralize(@comment.errors.count, "error") } prohibited this comment from being saved:"
        %ul
          - @comment.errors.full_messages.each do |msg|
            %li= msg

    %fieldset
      = f.hidden_field :task_id, :id => "comment-taskid"
      = f.hidden_field :commenter_id, :id => "comment-commenter"

      - if mode == :edit
        %span.last-update
          %strong Last updated:
          = comment.last_update

      %ul
        %li.field
          %label{ :for => "comment-reporter" } Reporter:
          %span.text-entry=comment.task.reporter.index_name

          %span#status-block
            %label{ :for => "comment-status" } Status:
            = render :partial => "partials/status_list_select",
                     :locals => { :status_list => @status_list, :item => comment.task, :id => "comment-status",
                                  :name => "comment[task_attributes][status_id]" }
        %li.field
          %label{ :for => "comment-assignee" } Assignee:
          %span.text-entry=comment.task.assignee.index_name
        %li.field
          %label{ :for => "comment-abstract" } Abstract:
          %em.text-entry=comment.task.abstract
        %li.field.description
          %label{ :for => "comment-description"} Description:
          = f.text_area :description, :id => "comment-description", :autofocus => true

    %hr

    %div.button-bar.actions
      %input#add-comment-cancel{ :class => [ "chekov-button" ], :type => "button", :value => "cancel" }
      = f.submit 'ok', :class => 'chekov-button', :id => "add-comment-submit"